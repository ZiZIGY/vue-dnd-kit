import{_ as t,c as a,o,ao as n}from"./chunks/framework.DALHSzXw.js";const g=JSON.parse('{"title":"useDragContainer","description":"","frontmatter":{},"headers":[],"relativePath":"guide/core/use-drag-container.md","filePath":"guide/core/use-drag-container.md"}'),i={name:"guide/core/use-drag-container.md"};function r(d,e,s,l,c,p){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="usedragcontainer" tabindex="-1">useDragContainer <a class="header-anchor" href="#usedragcontainer" aria-label="Permalink to &quot;useDragContainer&quot;">​</a></h1><p><code>useDragContainer</code> is a core composable that allows registering a custom container where dragged elements will be displayed. This composable gives users complete freedom to customize how dragged elements appear during drag operations.</p><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h2><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useDragContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>The <code>useDragContainer</code> composable doesn&#39;t accept any parameters.</p><h3 id="return-value" tabindex="-1">Return Value <a class="header-anchor" href="#return-value" aria-label="Permalink to &quot;Return Value&quot;">​</a></h3><p><code>useDragContainer</code> returns an object with the following properties:</p><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>elementRef</td><td><code>Ref&lt;HTMLElement | null&gt;</code></td><td>Template ref to attach to the container element</td></tr><tr><td>draggingElements</td><td><code>Map&lt;Element, any&gt;</code></td><td>Map of all currently dragged elements</td></tr><tr><td>pointerPosition</td><td><code>Object</code></td><td>Current and initial pointer positions during dragging</td></tr><tr><td>isDragging</td><td><code>ComputedRef&lt;boolean&gt;</code></td><td>Whether a drag operation is currently active</td></tr></tbody></table><h4 id="pointerposition-object" tabindex="-1">pointerPosition Object <a class="header-anchor" href="#pointerposition-object" aria-label="Permalink to &quot;pointerPosition Object&quot;">​</a></h4><p>The <code>pointerPosition</code> object includes:</p><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>start</td><td><code>Ref&lt;IPoint | null&gt;</code></td><td>Starting position when drag began</td></tr><tr><td>current</td><td><code>Ref&lt;IPoint | null&gt;</code></td><td>Current pointer position during dragging</td></tr><tr><td>offset.percent</td><td><code>Ref&lt;IPoint | null&gt;</code></td><td>Offset as percentage of element dimensions</td></tr><tr><td>offset.pixel</td><td><code>Ref&lt;IPoint | null&gt;</code></td><td>Offset in pixels</td></tr></tbody></table><h2 id="important-notes" tabindex="-1">Important Notes <a class="header-anchor" href="#important-notes" aria-label="Permalink to &quot;Important Notes&quot;">​</a></h2><ol><li><p>The <code>elementRef</code> must be bound to your container element in the template.</p></li><li><p>The container is automatically registered with the DnD system on mount and unregistered on unmount.</p></li><li><p>For proper positioning of dragged elements, use the values from <code>pointerPosition</code>.</p></li><li><p>If you create multiple drag containers, the most recently mounted one will be active.</p></li><li><p>Containers typically use <code>pointer-events: none</code> to prevent interfering with normal interactions.</p></li><li><p>To handle multi-select effectively, check <code>draggingElements.size</code> to determine how many elements are being dragged.</p></li><li><p>The container should typically be positioned fixed or absolute and cover the entire viewport to ensure dragged elements are visible anywhere.</p></li><li><p>For performance reasons, apply <code>will-change: transform</code> to elements that will move during dragging.</p></li><li><p>You may want to conditionally show the container only when <code>isDragging</code> is true to improve performance.</p></li></ol>',14)]))}const u=t(i,[["render",r]]);export{g as __pageData,u as default};
